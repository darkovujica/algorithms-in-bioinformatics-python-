from collections import Counter

def aminoMassTable():
    aminoMass = {
        'G': 57,
        'A': 71,
        'S': 87,
        'P': 97,
        'V': 99,
        'T': 101,
        'C': 103,
        'I': 113,
        'L': 113,
        'N': 114,
        'D': 115,
        'K': 128,
        'Q': 128,
        'E': 129,
        'M': 131,
        'H': 137,
        'F': 147,
        'R': 156,
        'Y': 163,
        'W': 186
    }
    return aminoMass

def linearSpectrum(peptide):
    aminoMassT = aminoMassTable()
    prefixMass = {
        0: 0
    }
    for i in range(len(peptide)):
        for j in range(20):
            if(list(aminoMassT.keys())[j] == peptide[i]):
                prefixMass[i + 1] = prefixMass[i] + aminoMassT[peptide[i]]
    
    linearSpc = [0]
    for i in range(len(peptide)):
        for j in range(i + 1, len(peptide) + 1):
            linearSpc.append(prefixMass[j] - prefixMass[i])
    return sorted(linearSpc)

def linearScore(expMass, peptide):
    expMass = expMass.split(" ")
    ls = linearSpectrum(peptide)
    ls = list(map(str, ls))
    counter1 = Counter(expMass)
    counter2 = Counter(ls)

    common_elements = counter1 & counter2
    count = sum(common_elements.values())
    return count

peptides = "ERAYVYWGMFYYDWNRPLCQRHGGWGMTLPVQHVME CTLCTLFLNDIYYVTKIQKKETCSCAFNCPRPAHFL SKQHEFLWVYQDFAFRFRGGCAIEEDICGGMGMIHN EVCSGVYGFSLSKNFKQHCSWPRVLWCVTLDMKEWY TERFFSDHIMTNAATPMYENDWMSENKPIKYTWHHW MRVIWQATWMTPQWMLQEFDEAAKPWTRVFFVRPTH AIQDHAPAHWDNMNSLKQFPQFNTWNCTSINKGEPH VHMKKVCGTSNYSANSCVPWGHPAPQCGHGKHYWDF WNKPHPNLWNQCIFSHHVCKDMEQIKHEENFGGWQS NLHEQSSTWNTHKSDWKVQLIFEIDFNHPLGFRKSI YPNRGSTKATFYNHMLPENTLLRWRRTYCMSQILAD EDIPPLVCMEIPAVSWCDMHYGVVILITIWNHTGAM ERCMNAQGPFPSMPLQCWCMFGSINECNLHFEVEIG ENFVCKEHDRVPHQMHMTSNYGGITCEQAYQVAAYK VMFDRNQVWFAPRVEPLHDSQNGKWPVGWRNIEMNR"
expMass = "0 57 57 71 71 71 87 87 87 97 99 99 99 101 101 101 103 113 113 114 114 115 128 129 131 131 137 137 144 147 156 156 156 156 158 158 163 174 186 186 186 186 186 194 196 200 211 212 213 213 214 214 218 224 227 227 232 234 250 257 257 259 261 265 270 271 276 281 284 285 287 287 287 295 299 299 300 303 307 310 310 313 314 321 323 327 330 342 342 342 349 355 358 369 370 371 371 374 378 379 382 386 390 394 396 400 400 401 412 413 413 415 424 426 436 436 443 443 445 450 451 457 458 459 463 466 470 471 473 481 487 488 493 493 500 505 511 513 513 513 516 526 534 534 537 552 557 564 564 568 571 574 574 576 580 580 582 583 584 586 587 590 592 597 601 605 606 612 612 621 625 627 645 649 649 650 661 663 665 667 669 670 679 682 684 684 689 692 695 699 700 702 711 720 720 720 720 721 724 727 738 738 740 749 760 766 768 770 771 778 781 783 791 792 796 797 798 798 803 805 807 808 817 821 823 833 835 836 839 851 856 858 874 876 876 877 878 882 882 884 895 904 906 906 907 909 916 924 926 932 934 935 945 947 952 952 954 955 959 963 964 979 979 981 983 987 992 1003 1005 1008 1019 1025 1030 1030 1031 1034 1035 1037 1042 1047 1050 1062 1063 1065 1068 1069 1070 1074 1078 1082 1090 1093 1095 1099 1102 1108 1118 1120 1120 1133 1137 1138 1138 1139 1145 1156 1161 1164 1166 1166 1167 1175 1177 1179 1186 1191 1192 1207 1211 1213 1216 1233 1233 1236 1239 1240 1246 1248 1248 1251 1251 1253 1255 1264 1265 1266 1268 1276 1301 1304 1310 1314 1317 1322 1322 1326 1335 1339 1347 1349 1350 1352 1352 1365 1369 1369 1370 1371 1372 1378 1379 1379 1385 1389 1404 1409 1413 1419 1432 1437 1440 1441 1442 1450 1451 1460 1466 1466 1466 1468 1472 1478 1478 1498 1503 1508 1512 1519 1523 1525 1527 1535 1535 1537 1538 1541 1543 1556 1563 1565 1569 1571 1575 1579 1590 1598 1609 1622 1622 1624 1625 1626 1629 1636 1642 1646 1654 1656 1664 1666 1679 1679 1684 1692 1699 1700 1712 1713 1721 1723 1723 1726 1727 1739 1749 1750 1753 1753 1757 1765 1783 1784 1785 1798 1808 1810 1814 1815 1822 1822 1828 1835 1836 1837 1839 1840 1840 1840 1856 1878 1885 1886 1890 1897 1906 1909 1911 1913 1935 1936 1937 1947 1953 1966 1971 1971 1971 1977 1984 1984 1993 2014 2015 2025 2034 2034 2036 2037 2042 2042 2048 2049 2050 2053 2072 2091 2092 2099 2124 2124 2127 2135 2139 2143 2143 2145 2147 2149 2150 2157 2162 2170 2190 2192 2198 2205 2211 2223 2234 2236 2247 2258 2261 2263 2274 2276 2290 2291 2301 2306 2310 2313 2318 2333 2335 2336 2348 2348 2373 2384 2404 2405 2414 2419 2419 2420 2421 2423 2430 2437 2447 2447 2449 2472 2477 2485 2487 2501 2504 2506 2518 2524 2535 2550 2560 2577 2586 2588 2600 2605 2605 2605 2616 2617 2632 2633 2637 2661 2691 2704 2704 2714 2717 2718 2718 2731 2736 2742 2763 2774 2788 2791 2817 2819 2823 2831 2845 2864 2870 2873 2877 2887 2890 2918 2932 2960 2960 2974 2978 3001 3001 3001 3003 3017 3031 3073 3075 3088 3097 3104 3118 3132 3154 3157 3174 3187 3217 3217 3219 3225 3255 3282 3288 3288 3343 3354 3356 3375 3383 3403 3413 3444 3474 3482 3512 3514 3540 3561 3569 3575 3613 3662 3668 3670 3698 3755 3769 3799 3799 3856 3856 3955 3955 3957 4056 4141 4242"

N = 5
peptideLst = peptides.split(" ")
leaderboard = {}
for p in peptideLst:
    leaderboard[p] = linearScore(expMass, p)

sortedLeaderboard = dict(sorted(leaderboard.items(), key=lambda x: x[1], reverse = True))
values = list(set(sortedLeaderboard.values()))
limit = values[N - 1]
LeaderBoard = []
for q in sortedLeaderboard.items():
    if(q[1] >= limit):
        LeaderBoard.append(q[0])

for i in LeaderBoard:
    print(i, end=" ")
