def aminoMassTable():
    aminoMass = {
        'G': 57,
        'A': 71,
        'S': 87,
        'P': 97,
        'V': 99,
        'T': 101,
        'C': 103,
        'I': 113,
        'L': 113,
        'N': 114,
        'D': 115,
        'K': 128,
        'Q': 128,
        'E': 129,
        'M': 131,
        'H': 137,
        'F': 147,
        'R': 156,
        'Y': 163,
        'W': 186
    }
    return aminoMass

def linearSpectrum(peptide):
    aminoMassT = aminoMassTable()
    prefixMass = {
        0: 0
    }
    for i in range(len(peptide)):
        for j in range(20):
            if(list(aminoMassT.keys())[j] == peptide[i]):
                prefixMass[i + 1] = prefixMass[i] + aminoMassT[peptide[i]]
    
    linearSpc = [0]
    for i in range(len(peptide)):
        for j in range(i + 1, len(peptide) + 1):
            linearSpc.append(prefixMass[j] - prefixMass[i])
    return sorted(linearSpc)

peptide = "HRKGIKFQCLAFKGLWIRSGKCPFENRVWDWQVDEKKAHT"
ls = linearSpectrum(peptide)
expMass = "0 57 57 57 57 87 97 97 99 99 99 101 101 101 103 113 113 113 113 114 114 115 115 128 128 128 128 128 128 128 129 137 144 147 147 147 154 156 156 156 170 170 172 185 185 185 186 186 186 200 212 214 227 227 229 229 230 231 238 241 242 242 243 244 244 255 256 257 257 267 269 270 271 272 275 275 276 285 286 288 298 298 299 299 299 300 300 301 301 313 328 333 340 341 342 347 356 356 356 357 366 370 371 373 374 375 377 385 386 388 398 398 399 399 399 400 403 412 413 414 415 423 426 427 428 428 430 441 445 446 453 455 456 456 469 472 474 475 476 485 487 487 499 502 513 514 516 526 526 527 527 527 531 532 533 536 541 542 542 542 543 543 545 556 566 568 571 573 573 577 583 599 600 600 600 604 615 615 619 625 627 628 628 630 632 641 641 642 642 642 644 655 655 657 661 664 670 671 672 673 673 674 684 698 699 701 705 712 712 713 713 722 727 728 729 733 741 741 748 756 757 762 769 769 769 770 771 775 785 786 786 797 798 799 800 801 802 809 811 812 814 818 820 827 830 832 840 849 856 861 866 869 883 884 888 897 897 898 899 899 899 900 901 904 913 913 914 915 917 918 925 927 933 939 940 942 943 948 956 960 971 974 994 998 998 998 1000 1005 1005 1012 1012 1013 1014 1017 1017 1018 1026 1028 1030 1038 1039 1040 1041 1045 1047 1055 1061 1069 1070 1074 1087 1097 1097 1099 1102 1104 1111 1113 1118 1118 1126 1127 1133 1140 1141 1142 1144 1146 1151 1154 1158 1161 1168 1169 1170 1175 1184 1187 1194 1197 1199 1200 1203 1203 1215 1215 1215 1239 1242 1244 1244 1246 1247 1255 1255 1260 1261 1267 1272 1272 1273 1274 1274 1283 1290 1298 1299 1304 1312 1316 1318 1325 1327 1328 1337 1340 1341 1341 1343 1347 1354 1371 1373 1373 1375 1375 1385 1386 1389 1395 1400 1401 1405 1411 1417 1426 1427 1430 1432 1439 1439 1440 1441 1444 1446 1446 1460 1470 1474 1474 1482 1484 1486 1488 1501 1503 1513 1514 1514 1519 1527 1539 1539 1540 1540 1542 1543 1543 1555 1559 1559 1560 1561 1571 1571 1573 1574 1581 1589 1595 1602 1614 1617 1627 1629 1630 1638 1640 1642 1646 1647 1659 1667 1669 1670 1671 1672 1674 1674 1675 1684 1686 1696 1696 1699 1702 1717 1718 1727 1729 1739 1745 1746 1751 1757 1770 1774 1774 1774 1783 1787 1788 1797 1799 1800 1803 1803 1812 1814 1814 1816 1825 1826 1831 1840 1858 1860 1861 1867 1870 1874 1886 1902 1902 1902 1904 1913 1913 1915 1916 1916 1917 1918 1926 1927 1927 1937 1942 1959 1968 1972 1973 1973 1974 1984 2012 2014 2014 2015 2015 2016 2017 2017 2030 2030 2045 2046 2050 2055 2055 2060 2069 2069 2073 2074 2087 2087 2102 2112 2112 2116 2127 2130 2142 2143 2144 2144 2156 2158 2159 2159 2161 2170 2172 2173 2174 2187 2201 2201 2202 2206 2213 2215 2215 2240 2241 2244 2255 2272 2272 2272 2273 2274 2288 2289 2290 2293 2300 2312 2314 2315 2316 2330 2341 2343 2345 2350 2357 2369 2371 2371 2373 2388 2391 2400 2401 2402 2418 2429 2440 2443 2444 2444 2444 2458 2458 2459 2460 2468 2478 2486 2486 2499 2501 2516 2519 2531 2541 2543 2545 2547 2557 2557 2573 2574 2581 2583 2587 2588 2600 2614 2615 2629 2632 2640 2646 2671 2672 2675 2678 2685 2687 2688 2689 2701 2702 2713 2716 2730 2742 2743 2768 2774 2786 2787 2788 2799 2800 2801 2814 2815 2817 2817 2825 2832 2845 2856 2887 2896 2899 2913 2914 2914 2914 2915 2916 2918 2944 2947 2954 2960 2973 2973 3000 3010 3012 3013 3029 3042 3043 3055 3061 3069 3072 3073 3074 3075 3086 3101 3113 3128 3130 3141 3157 3166 3170 3173 3185 3188 3189 3189 3211 3214 3229 3245 3256 3258 3267 3288 3302 3310 3313 3313 3313 3317 3342 3343 3359 3359 3373 3403 3414 3416 3430 3441 3441 3456 3460 3474 3487 3487 3496 3499 3529 3531 3555 3569 3586 3588 3588 3588 3600 3611 3612 3615 3644 3683 3701 3701 3711 3713 3714 3716 3716 3716 3725 3758 3812 3815 3829 3829 3830 3839 3844 3853 3886 3886 3930 3940 3952 3957 3958 3986 3987 4014 4014 4067 4071 4087 4114 4115 4124 4128 4142 4215 4227 4243 4252 4256 4284 4328 4357 4380 4385 4412 4494 4513 4513 4614 4650 4751"

expMass = expMass.split(" ")
ls = linearSpectrum(peptide)
ls = list(map(str, ls))

from collections import Counter

counter1 = Counter(expMass)
counter2 = Counter(ls)

common_elements = counter1 & counter2
count = sum(common_elements.values())
print(count)
